import json
from datetime import datetime

JSON_AZURE_ACTIVITY = "AzureActivityLog.json"
TIMESKETCH_JSONL = f"Sketch_{JSON_AZURE_ACTIVITY.replace(".json", ".jsonl")}"
type timesketch_object = list[dict[str, str | None]]


def parse_json_azure_audit_log(path: str) -> timesketch_object:
    """
    Parse json Audit Log generated by AzureAuditLog2json.ps1
    Mandatory fields:
    message String with an informative message of the event
    datetime ISO8601 format for example: 2015-07-24T19:01:01+00:00
    timestamp_desc String explaining what type of timestamp it is for example file created
    """
    with open(path, "r", encoding="utf-8-sig") as json_file:

        def _get_ip(dc: dict) -> str | None:
            try:
                return dc["Claims"]["Content"]["ipaddr"]
            except (TypeError, KeyError):
                ...

        def _zulu_time_to_utc(d: str, form: str):
            """
            TODO, not an ideal sulution
            "2024-11-10T11:14:25.0494189Z" zulu time to UTC
            """
            d = d.split(".")[0].removesuffix("Z")
            if form == "utc":
                return f"{datetime.strptime(d, "%Y-%m-%dT%H:%M:%S").isoformat()}+00:00"
            if form == "unix":
                return datetime.strptime(d, "%Y-%m-%dT%H:%M:%S").strftime("%s")
            else:
                raise NotImplementedError

        dict_json = json.load(json_file)

        return [
            {
                "message": d["Properties"]["Content"].get("message"),
                "datetime": _zulu_time_to_utc(d=d["EventTimestamp"], form="utc"),
                "timestamp": _zulu_time_to_utc(d=d["EventTimestamp"], form="unix"),
                "timestamp_desc": d["OperationName"],
                "Level": d["Level"],
                "Status": d["Status"],
                "Caller": d["Caller"],
                "Description": d["Description"],
                "ResourceId": d["ResourceId"],
                "IPAddress": _get_ip(d),
                ### Top level keys jq '.[0]| keys'
                # ["Authorization","Caller","Category","Claims","CorrelationId","Description","EventDataId","EventName","EventTimestamp","HttpRequest","Id","Level","OperationId","OperationName","Properties","ResourceGroupName","ResourceId","ResourceProviderName","ResourceType","Status","SubStatus","SubmissionTimestamp","SubscriptionId","TenantId"]
                # jq '.[0].Claims.Content| keys'
                # ["aio","appid","appidacr","aud","exp","groups","http://schemas.microsoft.com/claims/authnclassreference","http://schemas.microsoft.com/claims/authnmethodsreferences","http://schemas.microsoft.com/identity/claims/objectidentifier","http://schemas.microsoft.com/identity/claims/scope","http://schemas.microsoft.com/identity/claims/tenantid","http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname","http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name","http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier","http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname","http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn","iat","idtyp","ipaddr","iss","name","nbf","puid","rh","uti","ver","wids","xms_idrel","xms_tcdt"]
                # jq '.[0].Properties.Content| keys'
                # ["entity","eventCategory","hierarchy","message"]
            }
            for d in dict_json
        ]


def create_jsonl(data: timesketch_object) -> None:
    """
    Create jsonl file
    https://timesketch.org/guides/user/import-from-json-csv/
    """
    with open(
        TIMESKETCH_JSONL, "w", encoding="utf-8"
    ) as f:  # timesketch requred encoding is without bom
        for l in data:
            f.write(f"{json.dumps(l,ensure_ascii=False)}\n")


def main() -> None:
    """main logic"""
    tso: timesketch_object = parse_json_azure_audit_log(JSON_AZURE_ACTIVITY)
    create_jsonl(tso)
    # print(tso[1])


if __name__ == "__main__":
    raise SystemExit(main())
